{"ast":null,"code":"var _jsxFileName = \"/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js\",\n  _s = $RefreshSig$();\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { updatePracticeSongs } from '../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LessonDisplay() {\n  _s();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  // const selectRefs = practiceSongTitles.map(() => useRef(null));\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  // const selectedPracticeSongs = useSelector((state) => state.practiceSongs.selectedPracticeSongs);\n  const [selectedPracticeSongs, setSelectedPracticeSongs] = useState([]);\n  const selectedSongsInHolding = useSelector(state => state.selectedSongs.selectedSongs);\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n  const initialSelectedPracticeSongs = Array(5).fill('');\n  const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(initialSelectedPracticeSongs);\n  const [selectedPracticeSongIndex, setSelectedPracticeSongIndex] = useState(-1);\n  const [dropDownIndex, setDropDownIndex] = useState(-1);\n  useEffect(() => {\n    dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n  }, [selectedPracticeSongsArray, dispatch]);\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    setShowMoreOptions(!showMoreOptions);\n  };\n  const handlePracticeSongChange = songTitle => {\n    if (!selectedPracticeSongs.includes(songTitle)) {\n      const updatedPracticeSongs = [...selectedPracticeSongs, songTitle];\n      setSelectedPracticeSongs(updatedPracticeSongs);\n      dispatch(updatePracticeSongs(updatedPracticeSongs));\n      setShowMoreOptions(true);\n      setDropDownIndex(-1);\n    }\n  };\n  const handleSelectedPracticeSongChange = (selectedSongTitle, index) => {\n    const updatedPracticeSongsArray = [...selectedPracticeSongsArray];\n    updatedPracticeSongsArray[index] = selectedSongTitle;\n    setSelectedPracticeSongsArray(updatedPracticeSongsArray);\n\n    // updatePracticeSongTitles();\n\n    const updatedPracticeSongTitles = [...practiceSongTitles];\n    updatedPracticeSongTitles[index] = selectedSongTitle;\n    setPracticeSongTitles(updatedPracticeSongTitles);\n    console.log(practiceSongTitles);\n    setDropDownIndex(-1);\n  };\n  const updatePracticeSongTitles = () => {\n    const updatedPracticeSongsTitles = selectedPracticeSongsArray.map(title => title && title !== '' ? title : '');\n    setPracticeSongTitles(updatedPracticeSongsTitles);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.presentation.includes(concept)) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter(song => song.function.melodic.presentation.includes(concept));\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n    return matchingSongs[0].songTitle;\n  };\n  const focusSong = findFocusSong(selectedMelodicConcept, selectedSongsInHolding);\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.practice.includes(concept) && songTitle !== focusSong) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n    const remainingMatchingSongs = repDir.filter(song => song.function.melodic.practice.includes(concept));\n    const uniqueRemainingSongTitles = remainingMatchingSongs.filter(song => !matchingSongTitles.includes(song.songTitle)).map(song => song.songTitle);\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(0, additionalSongsNeeded);\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n  const [practiceSongTitles, setPracticeSongTitles] = useState(findMatchingPracticeSongs(selectedMelodicConcept, focusSong, selectedSongsInHolding));\n  console.log('selectedPracticeSongsArray:', selectedPracticeSongsArray);\n  console.log('selectedMelodicConcept:', selectedMelodicConcept);\n  console.log('focusSong:', focusSong);\n  console.log('selectedSongsInHolding:', selectedSongsInHolding);\n  console.log('practiceSongTitles:', practiceSongTitles);\n  const availablePracticeSongs = repDir.filter(song => song.function.melodic.practice.includes(selectedMelodicConcept) && song.songTitle !== focusSong && !practiceSongTitles.includes(song.songTitle)).map(song => song.songTitle);\n  useEffect(() => {\n    if (dropDownIndex !== -1 && selectRefs[dropDownIndex] && selectRefs[dropDownIndex].current) {\n      selectRefs[dropDownIndex].current.dispatchEvent(new MouseEvent(\"mousedown\"));\n    }\n  }, [dropDownIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessonDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LESSON DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Concept:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedMelodicConcept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Focus rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [focusSong, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMoreOptionsButtonClick,\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Practice rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"practiceRep\",\n      children: practiceSongTitles.map((title, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: dropDownIndex === index ? /*#__PURE__*/_jsxDEV(\"select\", {\n          ref: selectRefs[index],\n          value: selectedPracticeSongsArray[index],\n          onChange: e => handleSelectedPracticeSongChange(e.target.value, index),\n          onBlur: () => setDropDownIndex(-1),\n          children: availablePracticeSongs.map((songTitle, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: songTitle,\n            children: songTitle\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setDropDownIndex(index),\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(LessonDisplay, \"zzrPr1LGaSdFuLY2wgxINrjOn98=\", false, function () {\n  return [useDispatch, useLocation, useSelector];\n});\n_c = LessonDisplay;\nexport default LessonDisplay;\nvar _c;\n$RefreshReg$(_c, \"LessonDisplay\");","map":{"version":3,"names":["useLocation","repDir","updatePracticeSongs","useDispatch","useSelector","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","LessonDisplay","_s","dispatch","location","searchParams","URLSearchParams","search","selectedMelodicConcept","get","selectedPracticeSongs","setSelectedPracticeSongs","selectedSongsInHolding","state","selectedSongs","showMoreOptions","setShowMoreOptions","initialSelectedPracticeSongs","Array","fill","selectedPracticeSongsArray","setSelectedPracticeSongsArray","selectedPracticeSongIndex","setSelectedPracticeSongIndex","dropDownIndex","setDropDownIndex","selectedPracticeSong","setSelectedPracticeSong","handleMoreOptionsButtonClick","handlePracticeSongChange","songTitle","includes","updatedPracticeSongs","handleSelectedPracticeSongChange","selectedSongTitle","index","updatedPracticeSongsArray","updatedPracticeSongTitles","practiceSongTitles","setPracticeSongTitles","console","log","updatePracticeSongTitles","updatedPracticeSongsTitles","map","title","findFocusSong","concept","matchingSong","find","song","function","melodic","presentation","matchingSongs","filter","length","focusSong","findMatchingPracticeSongs","matchingSongTitles","practice","push","additionalSongsNeeded","remainingMatchingSongs","uniqueRemainingSongTitles","selectedRemainingSongTitles","slice","concat","availablePracticeSongs","selectRefs","current","dispatchEvent","MouseEvent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","value","onChange","e","target","onBlur","idx","_c","$RefreshReg$"],"sources":["/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js"],"sourcesContent":["import './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { updatePracticeSongs } from '../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect, useRef } from 'react';\n\nfunction LessonDisplay() {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  // const selectRefs = practiceSongTitles.map(() => useRef(null));\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  // const selectedPracticeSongs = useSelector((state) => state.practiceSongs.selectedPracticeSongs);\n  const [selectedPracticeSongs, setSelectedPracticeSongs] = useState([]);\n  const selectedSongsInHolding = useSelector(\n    (state) => state.selectedSongs.selectedSongs\n  );\n\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n \n\n  const initialSelectedPracticeSongs = Array(5).fill('');\n  const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(\n    initialSelectedPracticeSongs\n  );\n\n  const [selectedPracticeSongIndex, setSelectedPracticeSongIndex] =\n    useState(-1);\n  const [dropDownIndex, setDropDownIndex] = useState(-1);\n\n  useEffect(() => {\n    dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n  }, [selectedPracticeSongsArray, dispatch]);\n\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    setShowMoreOptions(!showMoreOptions);\n  };\n\n  const handlePracticeSongChange = (songTitle) => {\n    if (!selectedPracticeSongs.includes(songTitle)) {\n      const updatedPracticeSongs = [...selectedPracticeSongs, songTitle];\n      setSelectedPracticeSongs(updatedPracticeSongs);\n\n      dispatch(updatePracticeSongs(updatedPracticeSongs));\n      setShowMoreOptions(true);\n      setDropDownIndex(-1);\n    }\n  };\n\n  const handleSelectedPracticeSongChange = (selectedSongTitle, index) => {\n    const updatedPracticeSongsArray = [...selectedPracticeSongsArray];\n    updatedPracticeSongsArray[index] = selectedSongTitle;\n    setSelectedPracticeSongsArray(updatedPracticeSongsArray);\n\n    // updatePracticeSongTitles();\n\n    const updatedPracticeSongTitles = [...practiceSongTitles];\n    updatedPracticeSongTitles[index] = selectedSongTitle;\n    setPracticeSongTitles(updatedPracticeSongTitles);\n    console.log(practiceSongTitles);\n    setDropDownIndex(-1);\n  };\n\n  const updatePracticeSongTitles = () => {\n    const updatedPracticeSongsTitles = selectedPracticeSongsArray.map((title) =>\n      title && title !== '' ? title : ''\n    );\n    setPracticeSongTitles(updatedPracticeSongsTitles);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.presentation.includes(concept)\n      ) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter((song) =>\n      song.function.melodic.presentation.includes(concept)\n    );\n\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n\n    return matchingSongs[0].songTitle;\n  };\n\n  const focusSong = findFocusSong(\n    selectedMelodicConcept,\n    selectedSongsInHolding\n  );\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.practice.includes(concept) &&\n        songTitle !== focusSong\n      ) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n\n    const remainingMatchingSongs = repDir.filter((song) =>\n      song.function.melodic.practice.includes(concept)\n    );\n\n    const uniqueRemainingSongTitles = remainingMatchingSongs\n      .filter((song) => !matchingSongTitles.includes(song.songTitle))\n      .map((song) => song.songTitle);\n\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n      0,\n      additionalSongsNeeded\n    );\n\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n\n  const [practiceSongTitles, setPracticeSongTitles] = useState(\n    findMatchingPracticeSongs(\n      selectedMelodicConcept,\n      focusSong,\n      selectedSongsInHolding\n    )\n  );\n\n  console.log('selectedPracticeSongsArray:', selectedPracticeSongsArray);\n  console.log('selectedMelodicConcept:', selectedMelodicConcept);\n  console.log('focusSong:', focusSong);\n  console.log('selectedSongsInHolding:', selectedSongsInHolding);\n  console.log('practiceSongTitles:', practiceSongTitles);\n\n  const availablePracticeSongs = repDir\n    .filter(\n      (song) =>\n        song.function.melodic.practice.includes(selectedMelodicConcept) &&\n        song.songTitle !== focusSong &&\n        !practiceSongTitles.includes(song.songTitle)\n    )\n    .map((song) => song.songTitle);\n\nuseEffect(() => {\n  if (dropDownIndex !== -1 && selectRefs[dropDownIndex] && selectRefs[dropDownIndex].current) {\n    selectRefs[dropDownIndex].current.dispatchEvent(new MouseEvent(\"mousedown\"));\n  }\n}, [dropDownIndex]);\n\n  return (\n    <div className=\"lessonDisplay\">\n      <h1>LESSON DISPLAY</h1>\n      <h2>Concept:</h2>\n      <p>{selectedMelodicConcept}</p>\n      <h3>Focus rep:</h3>\n      <p>\n        {focusSong}\n        <button onClick={handleMoreOptionsButtonClick}>...</button>\n      </p>\n      <h3>Practice rep:</h3>\n\n      <ul className=\"practiceRep\">\n        {practiceSongTitles.map((title, index) => (\n          <li key={index}>\n            {dropDownIndex === index ? (\n              <select\n              ref={selectRefs[index]}\n                value={selectedPracticeSongsArray[index]}\n                onChange={(e) =>\n                  handleSelectedPracticeSongChange(e.target.value, index)\n                }\n                onBlur={() => setDropDownIndex(-1)}\n              >\n                {availablePracticeSongs.map((songTitle, idx) => (\n                  <option key={idx} value={songTitle}>\n                    {songTitle}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <>\n                <p>{title}</p>\n                <button onClick={() => setDropDownIndex(index)}>...</button>\n              </>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default LessonDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}