{"ast":null,"code":"var _jsxFileName = \"/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js\",\n  _s = $RefreshSig$();\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { updatePracticeSongs } from '../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LessonDisplay() {\n  _s();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  // const selectedPracticeSongs = useSelector((state) => state.practiceSongs.selectedPracticeSongs);\n  const [selectedPracticeSongs, setSelectedPracticeSongs] = useState([]);\n  const selectedSongsInHolding = useSelector(state => state.selectedSongs.selectedSongs);\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n  const initialSelectedPracticeSongs = Array(5).fill('');\n  const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(initialSelectedPracticeSongs);\n  useEffect(() => {\n    dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n  }, [selectedPracticeSongsArray, dispatch]);\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    setShowMoreOptions(!showMoreOptions);\n  };\n  const handlePracticeSongChange = songTitle => {\n    if (!selectedPracticeSongs.includes(songTitle)) {\n      const updatedPracticeSongs = [...selectedPracticeSongs, songTitle];\n      setSelectedPracticeSongs(updatedPracticeSongs);\n      dispatch(updatePracticeSongs(updatedPracticeSongs));\n      setShowMoreOptions(true);\n    }\n  };\n  const handleSelectedPracticeSongChange = (selectedSongTitle, index) => {\n    const updatedPracticeSongsArray = [...selectedPracticeSongsArray];\n    updatedPracticeSongsArray[index] = selectedSongTitle;\n    setSelectedPracticeSongsArray(updatedPracticeSongsArray);\n    if (selectedSongTitle !== '') {\n      const updatedPracticeSongTitles = [...practiceSongTitles];\n      updatedPracticeSongTitles[index] = selected;\n    }\n    const updatedPracticeSongTitles = findMatchingPracticeSongs(selectedMelodicConcept, focusSong, selectedSongsInHolding);\n    setPracticeSongTitles(updatedPracticeSongTitles);\n  };\n  const updatePracticeSongTitles = () => {\n    const updatedPracticeSongsTitles = [...practiceSongTitles];\n    for (let i = 0; i < selectedPracticeSongsArray.length; i++) {\n      const selectedTitle = selectedPracticeSongsArray[i];\n      if (selectedTitle !== '') {\n        updatedPracticeSongsTitles[i] = selectedTitle;\n      }\n    }\n    setPracticeSongTitles(updatePracticeSongTitles);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.presentation.includes(concept)) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter(song => song.function.melodic.presentation.includes(concept));\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n    return matchingSongs[0].songTitle;\n  };\n  const focusSong = findFocusSong(selectedMelodicConcept, selectedSongsInHolding);\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.practice.includes(concept) && songTitle !== focusSong) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n    const remainingMatchingSongs = repDir.filter(song => song.function.melodic.practice.includes(concept));\n    const uniqueRemainingSongTitles = remainingMatchingSongs.filter(song => !matchingSongTitles.includes(song.songTitle)).map(song => song.songTitle);\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(0, additionalSongsNeeded);\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n  const [practiceSongTitles, setPracticeSongTitles] = useState(findMatchingPracticeSongs(selectedMelodicConcept, focusSong, selectedSongsInHolding));\n  console.log(\"selectedPracticeSongsArray:\", selectedPracticeSongsArray);\n  console.log(\"selectedMelodicConcept:\", selectedMelodicConcept);\n  console.log(\"focusSong:\", focusSong);\n  console.log(\"selectedSongsInHolding:\", selectedSongsInHolding);\n  console.log(\"practiceSongTitles:\", practiceSongTitles);\n  const availablePracticeSongs = repDir.filter(song => song.function.melodic.practice.includes(selectedMelodicConcept) && song.songTitle !== focusSong && !practiceSongTitles.includes(song.songTitle)).map(song => song.songTitle);\n\n  // REMOVING THIS USEEFFECT FIXES THE ERROR!\n  //   useEffect(() => {\n  //   console.log(\"selectedPracticeSongsArray:\", selectedPracticeSongsArray);\n  //   console.log(\"selectedMelodicConcept:\", selectedMelodicConcept);\n  //   console.log(\"focusSong:\", focusSong);\n  //   console.log(\"selectedSongsInHolding:\", selectedSongsInHolding);\n  //   updatePracticeSongTitles();\n  // }, [\n  //   selectedPracticeSongsArray,\n  //   selectedMelodicConcept,\n  //   focusSong,\n  //   selectedSongsInHolding,\n  // ]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessonDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LESSON DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Concept:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedMelodicConcept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Focus rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [focusSong, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMoreOptionsButtonClick,\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Practice rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"practiceRep\",\n      children: practiceSongTitles.map((title, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [title, showMoreOptions && selectedPracticeSongs.includes(title) ? /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPracticeSongsArray[index],\n          onChange: e => handleSelectedPracticeSongChange(e.target.value, index),\n          children: availablePracticeSongs.map((songTitle, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: songTitle,\n            children: songTitle\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePracticeSongChange(title, index),\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(LessonDisplay, \"GhY9LTO48gdd7OHvVrec0pNpUiI=\", false, function () {\n  return [useDispatch, useLocation, useSelector];\n});\n_c = LessonDisplay;\nexport default LessonDisplay;\nvar _c;\n$RefreshReg$(_c, \"LessonDisplay\");","map":{"version":3,"names":["useLocation","repDir","updatePracticeSongs","useDispatch","useSelector","useState","useEffect","jsxDEV","_jsxDEV","LessonDisplay","_s","dispatch","location","searchParams","URLSearchParams","search","selectedMelodicConcept","get","selectedPracticeSongs","setSelectedPracticeSongs","selectedSongsInHolding","state","selectedSongs","showMoreOptions","setShowMoreOptions","initialSelectedPracticeSongs","Array","fill","selectedPracticeSongsArray","setSelectedPracticeSongsArray","selectedPracticeSong","setSelectedPracticeSong","handleMoreOptionsButtonClick","handlePracticeSongChange","songTitle","includes","updatedPracticeSongs","handleSelectedPracticeSongChange","selectedSongTitle","index","updatedPracticeSongsArray","updatedPracticeSongTitles","practiceSongTitles","selected","findMatchingPracticeSongs","focusSong","setPracticeSongTitles","updatePracticeSongTitles","updatedPracticeSongsTitles","i","length","selectedTitle","findFocusSong","concept","matchingSong","find","song","function","melodic","presentation","matchingSongs","filter","matchingSongTitles","practice","push","additionalSongsNeeded","remainingMatchingSongs","uniqueRemainingSongTitles","map","selectedRemainingSongTitles","slice","concat","console","log","availablePracticeSongs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","value","onChange","e","target","idx","_c","$RefreshReg$"],"sources":["/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js"],"sourcesContent":["import './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { updatePracticeSongs } from '../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\n\nfunction LessonDisplay() {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  // const selectedPracticeSongs = useSelector((state) => state.practiceSongs.selectedPracticeSongs);\n  const [selectedPracticeSongs, setSelectedPracticeSongs] = useState([]);\n  const selectedSongsInHolding = useSelector(\n    (state) => state.selectedSongs.selectedSongs\n  );\n\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n\n  const initialSelectedPracticeSongs = Array(5).fill('');\n  const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(\n    initialSelectedPracticeSongs\n  );\n\n  useEffect(() => {\n    dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n  }, [selectedPracticeSongsArray, dispatch]);\n\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    setShowMoreOptions(!showMoreOptions);\n  };\n\n  const handlePracticeSongChange = (songTitle) => {\n    if (!selectedPracticeSongs.includes(songTitle)) {\n      const updatedPracticeSongs = [...selectedPracticeSongs, songTitle];\n      setSelectedPracticeSongs(updatedPracticeSongs);\n\n      dispatch(updatePracticeSongs(updatedPracticeSongs));\n      setShowMoreOptions(true);\n    }\n  };\n\n  const handleSelectedPracticeSongChange = (selectedSongTitle, index) => {\n    const updatedPracticeSongsArray = [...selectedPracticeSongsArray];\n    updatedPracticeSongsArray[index] = selectedSongTitle;\n    setSelectedPracticeSongsArray(updatedPracticeSongsArray);\n\n    if(selectedSongTitle !== '') {\n      const updatedPracticeSongTitles = [...practiceSongTitles];\n      updatedPracticeSongTitles[index] = selected\n    }\n\n    const updatedPracticeSongTitles = findMatchingPracticeSongs(\n      selectedMelodicConcept,\n      focusSong,\n      selectedSongsInHolding\n    );\n    setPracticeSongTitles(updatedPracticeSongTitles);\n  };\n\n  const updatePracticeSongTitles = () => {\n    const updatedPracticeSongsTitles = [...practiceSongTitles];\n\n    for (let i = 0; i < selectedPracticeSongsArray.length; i++) {\n      const selectedTitle = selectedPracticeSongsArray[i];\n      if (selectedTitle !== '') {\n        updatedPracticeSongsTitles[i] = selectedTitle;\n      }\n    }\n    setPracticeSongTitles(updatePracticeSongTitles);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.presentation.includes(concept)\n      ) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter((song) =>\n      song.function.melodic.presentation.includes(concept)\n    );\n\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n\n    return matchingSongs[0].songTitle;\n  };\n\n  const focusSong = findFocusSong(\n    selectedMelodicConcept,\n    selectedSongsInHolding\n  );\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.practice.includes(concept) &&\n        songTitle !== focusSong\n      ) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n\n    const remainingMatchingSongs = repDir.filter((song) =>\n      song.function.melodic.practice.includes(concept)\n    );\n\n    const uniqueRemainingSongTitles = remainingMatchingSongs\n      .filter((song) => !matchingSongTitles.includes(song.songTitle))\n      .map((song) => song.songTitle);\n\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n      0,\n      additionalSongsNeeded\n    );\n\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n\n  const [practiceSongTitles, setPracticeSongTitles] = useState(\n    findMatchingPracticeSongs(\n      selectedMelodicConcept,\n      focusSong,\n      selectedSongsInHolding\n    )\n  );\n\n  console.log(\"selectedPracticeSongsArray:\", selectedPracticeSongsArray);\n  console.log(\"selectedMelodicConcept:\", selectedMelodicConcept);\n  console.log(\"focusSong:\", focusSong);\n  console.log(\"selectedSongsInHolding:\", selectedSongsInHolding);\n  console.log(\"practiceSongTitles:\", practiceSongTitles);\n  \n  const availablePracticeSongs = repDir\n    .filter(\n      (song) =>\n        song.function.melodic.practice.includes(selectedMelodicConcept) &&\n        song.songTitle !== focusSong &&\n        !practiceSongTitles.includes(song.songTitle)\n    )\n    .map((song) => song.songTitle);\n\n    \n    \n    \n    // REMOVING THIS USEEFFECT FIXES THE ERROR!\n  //   useEffect(() => {\n  //   console.log(\"selectedPracticeSongsArray:\", selectedPracticeSongsArray);\n  //   console.log(\"selectedMelodicConcept:\", selectedMelodicConcept);\n  //   console.log(\"focusSong:\", focusSong);\n  //   console.log(\"selectedSongsInHolding:\", selectedSongsInHolding);\n  //   updatePracticeSongTitles();\n  // }, [\n  //   selectedPracticeSongsArray,\n  //   selectedMelodicConcept,\n  //   focusSong,\n  //   selectedSongsInHolding,\n  // ]);\n\n  return (\n    <div className=\"lessonDisplay\">\n      <h1>LESSON DISPLAY</h1>\n      <h2>Concept:</h2>\n      <p>{selectedMelodicConcept}</p>\n      <h3>Focus rep:</h3>\n      <p>\n        {focusSong}\n        <button onClick={handleMoreOptionsButtonClick}>...</button>\n      </p>\n      <h3>Practice rep:</h3>\n\n      <ul className=\"practiceRep\">\n        {practiceSongTitles.map((title, index) => (\n          <li key={index}>\n            {title}\n            {showMoreOptions && selectedPracticeSongs.includes(title) ? (\n              <select\n                value={selectedPracticeSongsArray[index]}\n                onChange={(e) =>\n                  handleSelectedPracticeSongChange(e.target.value, index)\n                }\n              >\n                {availablePracticeSongs.map((songTitle, idx) => (\n                  <option key={idx} value={songTitle}>\n                    {songTitle}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <button onClick={() => handlePracticeSongChange(title, index)}>\n                Change\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default LessonDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}