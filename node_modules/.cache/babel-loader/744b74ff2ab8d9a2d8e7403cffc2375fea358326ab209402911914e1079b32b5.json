{"ast":null,"code":"var _jsxFileName = \"/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js\",\n  _s = $RefreshSig$();\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LessonDisplay() {\n  _s();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(state => state.selectedSongs.selectedSongs);\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n  const [availablePracticeSongs, setAvailablePracticeSongs] = useState([]);\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    setAvailablePracticeSongs(repDir.filter(song => song.function.melodic.practice.includes(selectedMelodicConcept) && song.songTitle !== focusSong));\n    setShowMoreOptions(!showMoreOptions);\n  };\n  const handlePracticeSongChange = songTitle => {\n    setSelectedPracticeSong(songTitle);\n    setShowMoreOptions(true);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.presentation.includes(concept)) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter(song => song.function.melodic.presentation.includes(concept));\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n    return matchingSongs[0].songTitle;\n  };\n  const focusSong = findFocusSong(selectedMelodicConcept, selectedSongsInHolding);\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.practice.includes(concept) && songTitle !== focusSong) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    // const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n    // if (additionalSongsNeeded <= 0) {\n    //   return matchingSongTitles;\n    // }\n\n    // const remainingMatchingSongs = repDir.filter((song) =>\n    //   song.function.melodic.practice.includes(concept)\n    // );\n\n    // const uniqueRemainingSongTitles = remainingMatchingSongs.filter(\n    //   (song) => !matchingSongTitles.includes(song.songTitle))\n    //   .map((song) => song.songTitle);\n\n    // const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n    //   0,\n    //   additionalSongsNeeded\n    // );\n\n    // return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n\n  const practiceSongTitles = findMatchingPracticeSongs(selectedMelodicConcept, focusSong, selectedSongsInHolding);\n  console.log(practiceSongTitles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessonDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LESSON DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Concept:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedMelodicConcept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Focus rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [focusSong, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMoreOptionsButtonClick,\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Practice rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"practiceRep\",\n      children: practiceSongTitles.map((title, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [title, showMoreOptions && selectedPracticeSong === title ? /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPracticeSong,\n          onChange: e => handlePracticeSongChange(e.target.value),\n          children: practiceSongTitles.map((songTitle, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: songTitle,\n            children: songTitle\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePracticeSongChange(title),\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(LessonDisplay, \"tx9HNrMQwzTRMFgdhQmZiXkz23M=\", false, function () {\n  return [useLocation, useSelector];\n});\n_c = LessonDisplay;\nexport default LessonDisplay;\nvar _c;\n$RefreshReg$(_c, \"LessonDisplay\");","map":{"version":3,"names":["useLocation","repDir","useSelector","useState","jsxDEV","_jsxDEV","LessonDisplay","_s","location","searchParams","URLSearchParams","search","selectedMelodicConcept","get","selectedSongsInHolding","state","selectedSongs","showMoreOptions","setShowMoreOptions","selectedPracticeSong","setSelectedPracticeSong","availablePracticeSongs","setAvailablePracticeSongs","handleMoreOptionsButtonClick","filter","song","function","melodic","practice","includes","songTitle","focusSong","handlePracticeSongChange","findFocusSong","concept","matchingSong","find","presentation","matchingSongs","length","findMatchingPracticeSongs","matchingSongTitles","push","practiceSongTitles","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","title","index","value","onChange","e","target","idx","_c","$RefreshReg$"],"sources":["/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js"],"sourcesContent":["import './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\n\nfunction LessonDisplay() {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(\n    (state) => state.selectedSongs.selectedSongs\n  );\n\n    const [showMoreOptions, setShowMoreOptions] = useState(false);\n    const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n    const [availablePracticeSongs, setAvailablePracticeSongs] = useState([]);\n\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () =>\n  {\n    setAvailablePracticeSongs(\n      repDir.filter(\n        (song) =>\n        song.function.melodic.practice.includes(selectedMelodicConcept) &&\n        song.songTitle !== focusSong\n      )\n    );\n    setShowMoreOptions(!showMoreOptions);\n  };\n\n  const handlePracticeSongChange = (songTitle) => {\n    setSelectedPracticeSong(songTitle);\n    setShowMoreOptions(true);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.presentation.includes(concept)\n      ) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter((song) =>\n      song.function.melodic.presentation.includes(concept)\n    );\n\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n\n    return matchingSongs[0].songTitle;\n  };\n\n  const focusSong = findFocusSong(\n    selectedMelodicConcept,\n    selectedSongsInHolding\n  );\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.practice.includes(concept) &&\n        songTitle !== focusSong\n      ) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n  \n    // const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n    // if (additionalSongsNeeded <= 0) {\n    //   return matchingSongTitles;\n    // }\n\n    // const remainingMatchingSongs = repDir.filter((song) =>\n    //   song.function.melodic.practice.includes(concept)\n    // );\n\n    // const uniqueRemainingSongTitles = remainingMatchingSongs.filter(\n    //   (song) => !matchingSongTitles.includes(song.songTitle))\n    //   .map((song) => song.songTitle);\n  \n\n    // const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n    //   0,\n    //   additionalSongsNeeded\n    // );\n\n    // return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n\n  const practiceSongTitles = findMatchingPracticeSongs(\n    selectedMelodicConcept,\n    focusSong,\n    selectedSongsInHolding\n  );\n  console.log(practiceSongTitles);\n\n  return (\n    <div className=\"lessonDisplay\">\n      <h1>LESSON DISPLAY</h1>\n      <h2>Concept:</h2>\n      <p>{selectedMelodicConcept}</p>\n      <h3>Focus rep:</h3>\n      <p>{focusSong}<button onClick={handleMoreOptionsButtonClick}>...</button></p>\n      <h3>Practice rep:</h3>\n      <ul className=\"practiceRep\">\n        {practiceSongTitles.map((title, index) => (\n          <li key={index}>\n            {title}\n            {showMoreOptions && selectedPracticeSong === title ? (\n              <select \n                value={selectedPracticeSong}\n                onChange={(e) => handlePracticeSongChange(e.target.value)}\n              >\n                {practiceSongTitles.map((songTitle, idx) => (\n                  <option key={idx} value={songTitle}>\n                    {songTitle}\n                  </option>\n                ))}\n              </select>\n            ) : (\n\n              <button onClick={() => handlePracticeSongChange(title)} >Change</button>\n            )\n            }\n            </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default LessonDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}