{"ast":null,"code":"var _jsxFileName = \"/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js\",\n  _s = $RefreshSig$();\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\nimport { shuffleArray, selectRandomItems } from '../../utilities';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LessonDisplay() {\n  _s();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(state => state.selectedSongs.selectedSongs);\n  cont[(showMoreOptions, setShowMoreOptions)] = useState(false);\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    setShowMoreOptions(!showMoreOptions);\n  };\n  const handlePracticeSongChange = songTitle => {\n    setSelectedPracticeSong(songTitle);\n    setShowMoreOptions(false);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.presentation.includes(concept)) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter(song => song.function.melodic.presentation.includes(concept));\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n    return matchingSongs[0].songTitle;\n  };\n  const focusSong = findFocusSong(selectedMelodicConcept, selectedSongsInHolding);\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.practice.includes(concept) && songTitle !== focusSong) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n    return matchingSongTitles;\n  };\n\n  //   const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n  //   if (additionalSongsNeeded <= 0) {\n  //     return matchingSongTitles;\n  //   }\n\n  //   const remainingMatchingSongs = repDir.filter((song) =>\n  //     song.function.melodic.practice.includes(concept)\n  //   );\n\n  //   const uniqueRemainingSongTitles = remainingMatchingSongs.filter(\n  //     (song) => !matchingSongTitles.includes(song.songTitle))\n  //     .map((song) => song.songTitle);\n\n  //   const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n  //     0,\n  //     additionalSongsNeeded\n  //   );\n\n  //   return matchingSongTitles.concat(selectedRemainingSongTitles);\n  // };\n\n  const practiceSongTitles = findMatchingPracticeSongs(selectedMelodicConcept, focusSong, selectedSongsInHolding);\n  console.log(practiceSongTitles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessonDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LESSON DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Concept:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedMelodicConcept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Focus rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [focusSong, /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Practice rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"practiceRep\",\n      children: practiceSongTitles.map((title, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [title, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleMoreOptionsButtonClick,\n          children: \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 34\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(LessonDisplay, \"zHYYAEZJyMYuqDJ2JbkZZDIrp04=\", false, function () {\n  return [useLocation, useSelector];\n});\n_c = LessonDisplay;\nexport default LessonDisplay;\nvar _c;\n$RefreshReg$(_c, \"LessonDisplay\");","map":{"version":3,"names":["useLocation","repDir","shuffleArray","selectRandomItems","useSelector","jsxDEV","_jsxDEV","LessonDisplay","_s","location","searchParams","URLSearchParams","search","selectedMelodicConcept","get","selectedSongsInHolding","state","selectedSongs","cont","showMoreOptions","setShowMoreOptions","useState","selectedPracticeSong","setSelectedPracticeSong","handleMoreOptionsButtonClick","handlePracticeSongChange","songTitle","findFocusSong","concept","matchingSong","find","song","function","melodic","presentation","includes","matchingSongs","filter","length","focusSong","findMatchingPracticeSongs","matchingSongTitles","practice","push","practiceSongTitles","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","index","onClick","_c","$RefreshReg$"],"sources":["/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js"],"sourcesContent":["import './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\nimport { shuffleArray, selectRandomItems } from '../../utilities';\nimport { useSelector } from 'react-redux';\n\nfunction LessonDisplay() {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(\n    (state) => state.selectedSongs.selectedSongs\n  );\n\n    cont [showMoreOptions, setShowMoreOptions] = useState(false);\n    const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () =>\n  {\n    setShowMoreOptions(!showMoreOptions);\n  };\n\n  const handlePracticeSongChange = (songTitle) => {\n    setSelectedPracticeSong(songTitle);\n    setShowMoreOptions(false);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.presentation.includes(concept)\n      ) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter((song) =>\n      song.function.melodic.presentation.includes(concept)\n    );\n\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n\n    return matchingSongs[0].songTitle;\n  };\n\n  const focusSong = findFocusSong(\n    selectedMelodicConcept,\n    selectedSongsInHolding\n  );\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.practice.includes(concept) &&\n        songTitle !== focusSong\n      ) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    return matchingSongTitles;\n  }\n\n  //   const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n  //   if (additionalSongsNeeded <= 0) {\n  //     return matchingSongTitles;\n  //   }\n\n  //   const remainingMatchingSongs = repDir.filter((song) =>\n  //     song.function.melodic.practice.includes(concept)\n  //   );\n\n  //   const uniqueRemainingSongTitles = remainingMatchingSongs.filter(\n  //     (song) => !matchingSongTitles.includes(song.songTitle))\n  //     .map((song) => song.songTitle);\n  \n\n  //   const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n  //     0,\n  //     additionalSongsNeeded\n  //   );\n\n  //   return matchingSongTitles.concat(selectedRemainingSongTitles);\n  // };\n\n  const practiceSongTitles = findMatchingPracticeSongs(\n    selectedMelodicConcept,\n    focusSong,\n    selectedSongsInHolding\n  );\n  console.log(practiceSongTitles);\n\n  return (\n    <div className=\"lessonDisplay\">\n      <h1>LESSON DISPLAY</h1>\n      <h2>Concept:</h2>\n      <p>{selectedMelodicConcept}</p>\n      <h3>Focus rep:</h3>\n      <p>{focusSong}<button>...</button></p>\n      <h3>Practice rep:</h3>\n      <ul className=\"practiceRep\">\n        {practiceSongTitles.map((title, index) => (\n          <li key={index}>{title}<button onClick={handleMoreOptionsButtonClick}>...</button></li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default LessonDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}