{"ast":null,"code":"var _jsxFileName = \"/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js\",\n  _s = $RefreshSig$();\n// import './LessonDisplay.css';\n// import { useLocation } from 'react-router-dom';\n// import repDir from '../../repGood2.json';\n// // import { shuffleArray, selectRandomItems } from '../../utilities';\n// import { updatePracticeSongs } from '../../redux/actions';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useState, useEffect } from 'react';\n\n// function LessonDisplay() {\n//   const dispatch = useDispatch();\n//   const location = useLocation();\n//   const searchParams = new URLSearchParams(location.search);\n//   const selectedMelodicConcept = searchParams.get('melodicConcept');\n//   // const selectedPracticeSongs = useSelector((state) => state.practiceSongs.selectedPracticeSongs);\n//   const [selectedPracticeSongs, setSelectedPracticeSongs] = useState([]);\n//   const selectedSongsInHolding = useSelector(\n//     (state) => state.selectedSongs.selectedSongs\n//   );\n\n//   const [showMoreOptions, setShowMoreOptions] = useState(false);\n\n// const initialSelectedPracticeSongs = Array(5).fill ('');\n// const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(initialSelectedPracticeSongs);\n\n// useEffect(() => {\n//   dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n// }, [selectedPracticeSongsArray, dispatch]);\n\n//   const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n//   // const [availablePracticeSongs, setAvailablePracticeSongs] = useState([]);\n\n//   // EVENT HANDLERS\n//   const handleMoreOptionsButtonClick = () => {\n//     setShowMoreOptions(!showMoreOptions);\n//   };\n\n//   const handlePracticeSongChange = (songTitle) => {\n//     if (!selectedPracticeSongs.includes(songTitle)) {\n//       const updatedPracticeSongs = [...selectedPracticeSongs, songTitle];\n//       setSelectedPracticeSongs(updatedPracticeSongs);\n\n//       dispatch(updatedPracticeSongs(updatedPracticeSongs));\n//       setShowMoreOptions(true);\n//       setSelectedPracticeSong(songTitle);\n//     }\n//   };\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LessonDisplay() {\n  _s();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(state => state.selectedSongs.selectedSongs);\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n  const initialSelectedPracticeSongs = Array(5).fill('');\n  const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(initialSelectedPracticeSongs);\n  useEffect(() => {\n    dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n  }, [selectedPracticeSongsArray, dispatch]);\n  const [selectedPracticeSongs, setSelectedPracticeSongs] = useState(initialSelectedPracticeSongs.map(() => ''));\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = index => {\n    setShowMoreOptions(prevState => ({\n      ...prevState,\n      [index]: !prevState[index]\n    }));\n  };\n  const handlePracticeSongChange = (index, songTitle) => {\n    if (!selectedPracticeSongs[index].includes(songTitle)) {\n      const updatedSelectedPracticeSongs = [...selectedPracticeSongs];\n      updatedSelectedPracticeSongs[index] = songTitle;\n      setSelectedPracticeSongs(updatedSelectedPracticeSongs);\n      const updatedPracticeSongsArray = [...selectedPracticeSongsArray];\n      updatedPracticeSongsArray[index] = updatedSelectedPracticeSongs;\n      setSelectedPracticeSongsArray(updatedPracticeSongsArray);\n      setShowMoreOptions({\n        ...showMoreOptions,\n        [index]: false\n      });\n    }\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.presentation.includes(concept)) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter(song => song.function.melodic.presentation.includes(concept));\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n    return matchingSongs[0].songTitle;\n  };\n  const focusSong = findFocusSong(selectedMelodicConcept, selectedSongsInHolding);\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.practice.includes(concept) && songTitle !== focusSong) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n    const remainingMatchingSongs = repDir.filter(song => song.function.melodic.practice.includes(concept));\n    const uniqueRemainingSongTitles = remainingMatchingSongs.filter(song => !matchingSongTitles.includes(song.songTitle)).map(song => song.songTitle);\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(0, additionalSongsNeeded);\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n  const [practiceSongTitles, setPracticeSongTitles] = useState(findMatchingPracticeSongs(selectedMelodicConcept, focusSong, selectedSongsInHolding));\n  // const practiceSongTitles = findMatchingPracticeSongs(\n  //   selectedMelodicConcept,\n  //   focusSong,\n  //   selectedSongsInHolding\n  // );\n\n  const availablePracticeSongs = repDir.filter(song => song.function.melodic.practice.includes(selectedMelodicConcept) && song.songTitle !== focusSong && !practiceSongTitles.includes.apply(song.songTitle)).map(song => song.songTitle);\n  console.log(practiceSongTitles);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessonDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LESSON DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Concept:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedMelodicConcept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), practiceSongTitles.map((title, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Practice rep \", index + 1, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"practiceRep\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [title, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleMoreOptionsButtonClick(index),\n            children: \"...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this), showMoreOptions[index] && /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedPracticeSongs[index],\n            onChange: e => handlePracticeSongChange(index, e.target.value),\n            children: availablePracticeSongs[index].map((songTitle, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: songTitle,\n              children: songTitle\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n_s(LessonDisplay, \"EWzNCh/mjfSt5Lj7S86f2WOxTlo=\", false, function () {\n  return [useDispatch, useLocation, useSelector];\n});\n_c = LessonDisplay;\nexport default LessonDisplay;\n\n//   return (\n//     <div className=\"lessonDisplay\">\n//       <h1>LESSON DISPLAY</h1>\n//       <h2>Concept:</h2>\n//       <p>{selectedMelodicConcept}</p>\n//       <h3>Focus rep:</h3>\n//       <p>\n//         {focusSong}\n//         <button onClick={handleMoreOptionsButtonClick}>...</button>\n//       </p>\n//       <h3>Practice rep:</h3>\n\n//       <ul className=\"practiceRep\">\n//         {practiceSongTitles.map((title, index) => (\n//           <li key={index}>\n//             {title}\n//             {showMoreOptions && selectedPracticeSongs.includes(title) ? (\n//               <select\n//                 value={selectedPracticeSong}\n//                 onChange={(e) => handlePracticeSongChange(e.target.value)}\n//               >\n//                 {availablePracticeSongs.map((songTitle, idx) => (\n//                   <option key={idx} value={songTitle}>\n//                     {songTitle}\n//                   </option>\n//                 ))}\n//               </select>\n//             ) : (\n//               <button onClick={() => handlePracticeSongChange(title, index)}>\n//                 Change\n//               </button>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default LessonDisplay;\nvar _c;\n$RefreshReg$(_c, \"LessonDisplay\");","map":{"version":3,"names":["useLocation","repDir","useDispatch","useSelector","useState","useEffect","jsxDEV","_jsxDEV","LessonDisplay","_s","dispatch","location","searchParams","URLSearchParams","search","selectedMelodicConcept","get","selectedSongsInHolding","state","selectedSongs","showMoreOptions","setShowMoreOptions","initialSelectedPracticeSongs","Array","fill","selectedPracticeSongsArray","setSelectedPracticeSongsArray","updatePracticeSongs","selectedPracticeSongs","setSelectedPracticeSongs","map","handleMoreOptionsButtonClick","index","prevState","handlePracticeSongChange","songTitle","includes","updatedSelectedPracticeSongs","updatedPracticeSongsArray","findFocusSong","concept","matchingSong","find","song","function","melodic","presentation","matchingSongs","filter","length","focusSong","findMatchingPracticeSongs","matchingSongTitles","practice","push","additionalSongsNeeded","remainingMatchingSongs","uniqueRemainingSongTitles","selectedRemainingSongTitles","slice","concat","practiceSongTitles","setPracticeSongTitles","availablePracticeSongs","apply","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","value","onChange","e","target","idx","_c","$RefreshReg$"],"sources":["/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js"],"sourcesContent":["// import './LessonDisplay.css';\n// import { useLocation } from 'react-router-dom';\n// import repDir from '../../repGood2.json';\n// // import { shuffleArray, selectRandomItems } from '../../utilities';\n// import { updatePracticeSongs } from '../../redux/actions';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { useState, useEffect } from 'react';\n\n// function LessonDisplay() {\n//   const dispatch = useDispatch();\n//   const location = useLocation();\n//   const searchParams = new URLSearchParams(location.search);\n//   const selectedMelodicConcept = searchParams.get('melodicConcept');\n//   // const selectedPracticeSongs = useSelector((state) => state.practiceSongs.selectedPracticeSongs);\n//   const [selectedPracticeSongs, setSelectedPracticeSongs] = useState([]);\n//   const selectedSongsInHolding = useSelector(\n//     (state) => state.selectedSongs.selectedSongs\n//   );\n\n//   const [showMoreOptions, setShowMoreOptions] = useState(false);\n\n// const initialSelectedPracticeSongs = Array(5).fill ('');\n// const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(initialSelectedPracticeSongs);\n\n// useEffect(() => {\n//   dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n// }, [selectedPracticeSongsArray, dispatch]);\n\n//   const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n\n//   // const [availablePracticeSongs, setAvailablePracticeSongs] = useState([]);\n\n//   // EVENT HANDLERS\n//   const handleMoreOptionsButtonClick = () => {\n//     setShowMoreOptions(!showMoreOptions);\n//   };\n\n//   const handlePracticeSongChange = (songTitle) => {\n//     if (!selectedPracticeSongs.includes(songTitle)) {\n//       const updatedPracticeSongs = [...selectedPracticeSongs, songTitle];\n//       setSelectedPracticeSongs(updatedPracticeSongs);\n\n//       dispatch(updatedPracticeSongs(updatedPracticeSongs));\n//       setShowMoreOptions(true);\n//       setSelectedPracticeSong(songTitle);\n//     }\n//   };\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState, useEffect } from 'react';\n\nfunction LessonDisplay() {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(\n    (state) => state.selectedSongs.selectedSongs\n  );\n\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n\n  const initialSelectedPracticeSongs = Array(5).fill('');\n  const [selectedPracticeSongsArray, setSelectedPracticeSongsArray] = useState(\n    initialSelectedPracticeSongs\n  );\n\n  useEffect(() => {\n    dispatch(updatePracticeSongs(selectedPracticeSongsArray));\n  }, [selectedPracticeSongsArray, dispatch]);\n\n  const [selectedPracticeSongs, setSelectedPracticeSongs] = useState(\n    initialSelectedPracticeSongs.map(() => '')\n  );\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = (index) => {\n    setShowMoreOptions((prevState) => ({\n      ...prevState,\n      [index]: !prevState[index],\n    }));\n  };\n\n  const handlePracticeSongChange = (index, songTitle) => {\n    if (!selectedPracticeSongs[index].includes(songTitle)) {\n      const updatedSelectedPracticeSongs = [...selectedPracticeSongs];\n      updatedSelectedPracticeSongs[index] = songTitle;\n\n      setSelectedPracticeSongs(updatedSelectedPracticeSongs);\n\n      const updatedPracticeSongsArray = [...selectedPracticeSongsArray];\n      updatedPracticeSongsArray[index] = updatedSelectedPracticeSongs;\n      setSelectedPracticeSongsArray(updatedPracticeSongsArray);\n\n      setShowMoreOptions({ ...showMoreOptions, [index]: false });\n    }\n  };\n\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.presentation.includes(concept)\n      ) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter((song) =>\n      song.function.melodic.presentation.includes(concept)\n    );\n\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n\n    return matchingSongs[0].songTitle;\n  };\n\n  const focusSong = findFocusSong(\n    selectedMelodicConcept,\n    selectedSongsInHolding\n  );\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.practice.includes(concept) &&\n        songTitle !== focusSong\n      ) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n\n    const remainingMatchingSongs = repDir.filter((song) =>\n      song.function.melodic.practice.includes(concept)\n    );\n\n    const uniqueRemainingSongTitles = remainingMatchingSongs\n      .filter((song) => !matchingSongTitles.includes(song.songTitle))\n      .map((song) => song.songTitle);\n\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n      0,\n      additionalSongsNeeded\n    );\n\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n\n\n  const [practiceSongTitles, setPracticeSongTitles] = useState(findMatchingPracticeSongs(\n    selectedMelodicConcept,\n    focusSong,\n    selectedSongsInHolding\n  ));\n  // const practiceSongTitles = findMatchingPracticeSongs(\n  //   selectedMelodicConcept,\n  //   focusSong,\n  //   selectedSongsInHolding\n  // );\n\n  const availablePracticeSongs = repDir\n    .filter(\n      (song) =>\n        song.function.melodic.practice.includes(selectedMelodicConcept) &&\n        song.songTitle !== focusSong &&\n        !practiceSongTitles.includes.apply(song.songTitle)\n    )\n    .map((song) => song.songTitle);\n  console.log(practiceSongTitles);\n\n  return (\n    <div className=\"lessonDisplay\">\n      <h1>LESSON DISPLAY</h1>\n      <h2>Concept:</h2>\n      <p>{selectedMelodicConcept}</p>\n\n      {/* Iterate over practice songs */}\n      {practiceSongTitles.map((title, index) => (\n        <div key={index}>\n          <h3>Practice rep {index + 1}:</h3>\n          <ul className=\"practiceRep\">\n            <li>\n              {title}\n              <button onClick={() => handleMoreOptionsButtonClick(index)}>\n                ...\n              </button>\n              {showMoreOptions[index] && (\n                <select\n                  value={selectedPracticeSongs[index]}\n                  onChange={(e) =>\n                    handlePracticeSongChange(index, e.target.value)\n                  }\n                >\n                  {availablePracticeSongs[index].map((songTitle, idx) => (\n                    <option key={idx} value={songTitle}>\n                      {songTitle}\n                    </option>\n                  ))}\n                </select>\n              )}\n            </li>\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default LessonDisplay;\n\n//   return (\n//     <div className=\"lessonDisplay\">\n//       <h1>LESSON DISPLAY</h1>\n//       <h2>Concept:</h2>\n//       <p>{selectedMelodicConcept}</p>\n//       <h3>Focus rep:</h3>\n//       <p>\n//         {focusSong}\n//         <button onClick={handleMoreOptionsButtonClick}>...</button>\n//       </p>\n//       <h3>Practice rep:</h3>\n\n//       <ul className=\"practiceRep\">\n//         {practiceSongTitles.map((title, index) => (\n//           <li key={index}>\n//             {title}\n//             {showMoreOptions && selectedPracticeSongs.includes(title) ? (\n//               <select\n//                 value={selectedPracticeSong}\n//                 onChange={(e) => handlePracticeSongChange(e.target.value)}\n//               >\n//                 {availablePracticeSongs.map((songTitle, idx) => (\n//                   <option key={idx} value={songTitle}>\n//                     {songTitle}\n//                   </option>\n//                 ))}\n//               </select>\n//             ) : (\n//               <button onClick={() => handlePracticeSongChange(title, index)}>\n//                 Change\n//               </button>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default LessonDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}