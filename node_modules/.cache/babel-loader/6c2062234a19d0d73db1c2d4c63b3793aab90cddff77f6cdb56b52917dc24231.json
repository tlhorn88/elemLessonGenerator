{"ast":null,"code":"var _jsxFileName = \"/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js\",\n  _s = $RefreshSig$();\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LessonDisplay() {\n  _s();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(state => state.selectedSongs.selectedSongs);\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n  // const [availablePracticeSongs, setAvailablePracticeSongs] = useState([]);\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    // setAvailablePracticeSongs(\n    //   repDir.filter(\n    //     (song) =>\n    //     song.function.melodic.practice.includes(selectedMelodicConcept) &&\n    //     song.songTitle !== focusSong\n    //   )\n    // );\n    setShowMoreOptions(!showMoreOptions);\n  };\n  const handlePracticeSongChange = songTitle => {\n    const updatedPracticeSongs = practuceSongTitles.map(title => title === selectedPracticeSong ? songTitle : title);\n    setSelectedPracticeSong(songTitle);\n    setShowMoreOptions(true);\n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.presentation.includes(concept)) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter(song => song.function.melodic.presentation.includes(concept));\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n    return matchingSongs[0].songTitle;\n  };\n  const focusSong = findFocusSong(selectedMelodicConcept, selectedSongsInHolding);\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find(song => song.songTitle === songTitle);\n      if (matchingSong && matchingSong.function.melodic.practice.includes(concept) && songTitle !== focusSong) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n    const remainingMatchingSongs = repDir.filter(song => song.function.melodic.practice.includes(concept));\n    const uniqueRemainingSongTitles = remainingMatchingSongs.filter(song => !matchingSongTitles.includes(song.songTitle)).map(song => song.songTitle);\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(0, additionalSongsNeeded);\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n  const practiceSongTitles = findMatchingPracticeSongs(selectedMelodicConcept, focusSong, selectedSongsInHolding);\n  const availablePracticeSongs = repDir.filter(song => song.function.melodic.practice.includes(selectedMelodicConcept) && song.songTitle !== focusSong && !practiceSongTitles.includes.apply(song.songTitle)).map(song => song.songTitle);\n  // console.log(practiceSongTitle);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessonDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LESSON DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Concept:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedMelodicConcept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Focus rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [focusSong, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMoreOptionsButtonClick,\n        children: \"...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Practice rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"practiceRep\",\n      children: practiceSongTitles.map((title, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [title, showMoreOptions && selectedPracticeSong === title ? /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedPracticeSong,\n          onChange: e => handlePracticeSongChange(e.target.value),\n          children: availablePracticeSongs.map((songTitle, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: songTitle,\n            children: songTitle\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePracticeSongChange(title),\n          children: \"Change\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(LessonDisplay, \"zXCYk8DGktU6rJXosIl7ziHbKIQ=\", false, function () {\n  return [useLocation, useSelector];\n});\n_c = LessonDisplay;\nexport default LessonDisplay;\nvar _c;\n$RefreshReg$(_c, \"LessonDisplay\");","map":{"version":3,"names":["useLocation","repDir","useSelector","useState","jsxDEV","_jsxDEV","LessonDisplay","_s","location","searchParams","URLSearchParams","search","selectedMelodicConcept","get","selectedSongsInHolding","state","selectedSongs","showMoreOptions","setShowMoreOptions","selectedPracticeSong","setSelectedPracticeSong","handleMoreOptionsButtonClick","handlePracticeSongChange","songTitle","updatedPracticeSongs","practuceSongTitles","map","title","findFocusSong","concept","matchingSong","find","song","function","melodic","presentation","includes","matchingSongs","filter","length","focusSong","findMatchingPracticeSongs","matchingSongTitles","practice","push","additionalSongsNeeded","remainingMatchingSongs","uniqueRemainingSongTitles","selectedRemainingSongTitles","slice","concat","practiceSongTitles","availablePracticeSongs","apply","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","index","value","onChange","e","target","idx","_c","$RefreshReg$"],"sources":["/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js"],"sourcesContent":["import './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n// import { shuffleArray, selectRandomItems } from '../../utilities';\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\n\nfunction LessonDisplay() {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n  const selectedSongsInHolding = useSelector(\n    (state) => state.selectedSongs.selectedSongs\n  );\n\n  const [showMoreOptions, setShowMoreOptions] = useState(false);\n  const [selectedPracticeSong, setSelectedPracticeSong] = useState('');\n  // const [availablePracticeSongs, setAvailablePracticeSongs] = useState([]);\n\n  // EVENT HANDLERS\n  const handleMoreOptionsButtonClick = () => {\n    // setAvailablePracticeSongs(\n    //   repDir.filter(\n    //     (song) =>\n    //     song.function.melodic.practice.includes(selectedMelodicConcept) &&\n    //     song.songTitle !== focusSong\n    //   )\n    // );\n    setShowMoreOptions(!showMoreOptions);\n  };\n\n  const handlePracticeSongChange = (songTitle) => {\n    const updatedPracticeSongs = practuceSongTitles.map((title) => title === selectedPracticeSong ? songTitle : title);\n    setSelectedPracticeSong(songTitle);\n    setShowMoreOptions(true);\n    \n  };\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept, selectedSongs) => {\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.presentation.includes(concept)\n      ) {\n        return songTitle;\n      }\n    }\n    const matchingSongs = repDir.filter((song) =>\n      song.function.melodic.presentation.includes(concept)\n    );\n\n    if (matchingSongs.length === 0) {\n      return 'No matching song found.  Go on a repertoire hunt!';\n    }\n\n    return matchingSongs[0].songTitle;\n  };\n\n  const focusSong = findFocusSong(\n    selectedMelodicConcept,\n    selectedSongsInHolding\n  );\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT, EXCLUDING THE FOCUS SONG\n  const findMatchingPracticeSongs = (concept, focusSong, selectedSongs) => {\n    const matchingSongTitles = [];\n\n    for (const songTitle of selectedSongs) {\n      const matchingSong = repDir.find((song) => song.songTitle === songTitle);\n      if (\n        matchingSong &&\n        matchingSong.function.melodic.practice.includes(concept) &&\n        songTitle !== focusSong\n      ) {\n        matchingSongTitles.push(songTitle);\n      }\n    }\n\n    // return matchingSongTitles;\n\n    const additionalSongsNeeded = 5 - matchingSongTitles.length;\n\n    if (additionalSongsNeeded <= 0) {\n      return matchingSongTitles;\n    }\n\n    const remainingMatchingSongs = repDir.filter((song) =>\n      song.function.melodic.practice.includes(concept)\n    );\n\n    const uniqueRemainingSongTitles = remainingMatchingSongs\n      .filter((song) => !matchingSongTitles.includes(song.songTitle))\n      .map((song) => song.songTitle);\n\n    const selectedRemainingSongTitles = uniqueRemainingSongTitles.slice(\n      0,\n      additionalSongsNeeded\n    );\n\n    return matchingSongTitles.concat(selectedRemainingSongTitles);\n  };\n\n  const practiceSongTitles = findMatchingPracticeSongs(\n    selectedMelodicConcept,\n    focusSong,\n    selectedSongsInHolding\n  );\n\n  const availablePracticeSongs = repDir\n    .filter(\n      (song) =>\n        song.function.melodic.practice.includes(selectedMelodicConcept) &&\n        song.songTitle !== focusSong &&\n        !practiceSongTitles.includes.apply(song.songTitle)\n    )\n    .map((song) => song.songTitle);\n  // console.log(practiceSongTitle);\n\n  return (\n    <div className=\"lessonDisplay\">\n      <h1>LESSON DISPLAY</h1>\n      <h2>Concept:</h2>\n      <p>{selectedMelodicConcept}</p>\n      <h3>Focus rep:</h3>\n      <p>\n        {focusSong}\n        <button onClick={handleMoreOptionsButtonClick}>...</button>\n      </p>\n      <h3>Practice rep:</h3>\n\n      <ul className=\"practiceRep\">\n        {practiceSongTitles.map((title, index) => (\n          <li key={index}>\n            {title}\n            {showMoreOptions && selectedPracticeSong === title ? (\n              <select\n                value={selectedPracticeSong}\n                onChange={(e) => handlePracticeSongChange(e.target.value)}\n              >\n                {availablePracticeSongs.map((songTitle, idx) => (\n                  <option key={idx} value={songTitle}>\n                    {songTitle}\n                  </option>\n                ))}\n              </select>\n            ) : (\n              <button onClick={() => handlePracticeSongChange(title)}>\n                Change\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default LessonDisplay;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}