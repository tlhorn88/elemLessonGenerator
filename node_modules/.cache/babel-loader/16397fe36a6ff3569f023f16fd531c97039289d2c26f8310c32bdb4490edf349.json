{"ast":null,"code":"var _jsxFileName = \"/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js\",\n  _s = $RefreshSig$();\nimport './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LessonDisplay() {\n  _s();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = concept => {\n    for (const song of repDir) {\n      if (song.function.melodic.presentation.includes(concept)) {\n        return song.songTitle;\n      }\n    }\n    return \"No matching song found.  Go on a repertoire hunt!\";\n  };\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT\n  const findMatchingPracticeSongs = concept => {\n    const matchingSongs = [];\n    for (const song of repDir) {\n      if (song.function.melodic.practice.includes(concept)) {\n        matchingSongs.push(song.songTitle);\n        if (practiceSongs.length === 5) {\n          break;\n        }\n      }\n    }\n    return matchingSongs;\n  };\n  const matchingSongs = findMatchingSongs(selectedMelodicConcept);\n  const randomizedPracticeSongs = shuffleArray(selectRandomItems(matchingSongs, 5));\n  const focusSongTitle = findFocusSong(selectedMelodicConcept);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessonDisplay\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LESSON DISPLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Concept:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: selectedMelodicConcept\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Focus rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: focusSongTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Practice rep:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"practiceRep\",\n      children: randomizedPracticeSongs.map((title, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: title\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(LessonDisplay, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = LessonDisplay;\nexport default LessonDisplay;\nvar _c;\n$RefreshReg$(_c, \"LessonDisplay\");","map":{"version":3,"names":["useLocation","repDir","jsxDEV","_jsxDEV","LessonDisplay","_s","location","searchParams","URLSearchParams","search","selectedMelodicConcept","get","findFocusSong","concept","song","function","melodic","presentation","includes","songTitle","findMatchingPracticeSongs","matchingSongs","practice","push","practiceSongs","length","findMatchingSongs","randomizedPracticeSongs","shuffleArray","selectRandomItems","focusSongTitle","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","title","index","_c","$RefreshReg$"],"sources":["/Users/tabethahorn/Documents/code/elementaryMusic/src/Components/LessonDisplay/LessonDisplay.js"],"sourcesContent":["import './LessonDisplay.css';\nimport { useLocation } from 'react-router-dom';\nimport repDir from '../../repGood2.json';\n\n\nfunction LessonDisplay() {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedMelodicConcept = searchParams.get('melodicConcept');\n\n  // SEARCHES FOR SONG TITLE THAT CAN PRESENT CONCEPT\n  const findFocusSong = (concept) => {\n    for (const song of repDir) {\n      if (song.function.melodic.presentation.includes(concept)) {\n        return song.songTitle;\n      }\n    }\n    return \"No matching song found.  Go on a repertoire hunt!\"\n  }\n\n  // SEARCHES FOR LIST OF PRACTICE SONGS FOR SELECTED CONCEPT\n  const findMatchingPracticeSongs = (concept) => {\n    const matchingSongs = [];\n    for (const song of repDir) {\n      if (song.function.melodic.practice.includes(concept)) {\n        matchingSongs.push(song.songTitle);\n        if (practiceSongs.length === 5) {\n          break;\n        }\n      }\n    }\n    return matchingSongs;\n  }\n\n  const matchingSongs = findMatchingSongs(selectedMelodicConcept);\n  const randomizedPracticeSongs = shuffleArray(selectRandomItems(matchingSongs, 5));\n\n  const focusSongTitle = findFocusSong(selectedMelodicConcept);\n\n\n  return (\n    <div className='lessonDisplay'>\n      <h1>LESSON DISPLAY</h1>\n      <h2>Concept:</h2>\n      <p>{selectedMelodicConcept}</p>\n      <h3>Focus rep:</h3>\n      <p>{focusSongTitle}</p>\n      <h3>Practice rep:</h3>\n      <ul className='practiceRep'>\n        {randomizedPracticeSongs.map((title, index) => (\n          <li key={index}>{title}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default LessonDisplay;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}